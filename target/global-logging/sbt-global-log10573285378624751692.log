[0m[[0m[0mdebug[0m] [0m[0m> Exec(collectAnalyses, None, Some(CommandSource(network-1)))[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Processing event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: initialized: JsonRpcNotificationMessage(2.0, initialized, {})[0m
[0m[[0m[0mdebug[0m] [0m[0mUnhandled notification received: textDocument/didOpen: JsonRpcNotificationMessage(2.0, textDocument/didOpen, {"textDocument":{"uri":"file:///Users/marielynn/Documents/GitHub/data_engineering_project/src/main/scala/com/peaceland/kafka/processing/KafkaConsumerAnalyzer.scala","languageId":"scala","version":1,"text":"\n\n\npackage com.peaceland.kafka.processing\n\n\nimport com.peaceland.utils.{Alert, Citizen, Drone, GetSource, Report}\nimport org.apache.kafka.clients.consumer.{ConsumerConfig, ConsumerRecords, KafkaConsumer}\nimport org.apache.kafka.common.serialization.StringDeserializer\nimport play.api.libs.json.Json\n\nimport java.time.Duration\nimport java.util.Properties\nimport scala.jdk.CollectionConverters._\n\nobject KafkaConsumerAnalyzerApp extends App {\n\n  // Configuration du consumer Kafka\n  val props: Properties = new Properties()\n  props.put(ConsumerConfig.GROUP_ID_CONFIG, \"test\")\n  props.put(ConsumerConfig.BOOTSTRAP_SERVERS_CONFIG, \"localhost:9092\")\n  props.put(ConsumerConfig.KEY_DESERIALIZER_CLASS_CONFIG, classOf[StringDeserializer])\n  props.put(ConsumerConfig.VALUE_DESERIALIZER_CLASS_CONFIG, classOf[StringDeserializer])\n  props.put(ConsumerConfig.ENABLE_AUTO_COMMIT_CONFIG, \"true\")\n  props.put(ConsumerConfig.AUTO_COMMIT_INTERVAL_MS_CONFIG, \"1000\")\n\n  val consumer: KafkaConsumer[String, String] = new KafkaConsumer[String, String](props)\n\n  consumer.subscribe(List(\"peaceLand\").asJava)\n\n  // Fonction pour calculer le score moyen des citoyens\n  def calculateAverageScore(citizens: List[Citizen]): Double = {\n    val scores = citizens.map(_.score)\n    if (scores.nonEmpty)\n      scores.sum.toDouble / scores.length.toDouble\n    else\n      0.0\n  }\n\n  // Fonction pour obtenir le score maximum et minimum des citoyens\n  def getMinMaxScore(citizens: List[Citizen]): (Int, Int) = {\n    val scores = citizens.map(_.score)\n    (scores.max, scores.min)\n  }\n\n  // Fonction pour compter le nombre de citoyens par score\n  def countCitizensByScore(citizens: List[Citizen]): Map[Int, Int] = {\n    citizens.groupBy(_.score).mapValues(_.size)\n  }\n\n  // Fonction pour obtenir les citoyens les plus problÃ©matiques (score > 7)\n  def getTroubleMakers(citizens: List[Citizen]): List[Citizen] = {\n    citizens.filter(_.score > 7)\n  }\n\n  // Fonction pour analyser la rÃ©partition gÃ©ographique\n  def analyzeGeographicalDistribution(drones: List[Drone]): Map[(Double, Double), Int] = {\n    drones.groupBy(drone => (drone.latitude, drone.longitude)).mapValues(_.size)\n  }\n\n  // Extraction des dates Ã  partir des rapports\n  val dates: List[String] = consumerRecords.asScala.toList.flatMap { record =>\n  val recordValue = record.value()\n  val parsedRecord = Json.parse(recordValue)\n  val report = parsedRecord.as[Report]\n  report.date\n}\n  // Fonction pour analyser les tendances temporelles\n  def analyzeTemporalTrends(dates: List[String]): Map[String, Int] = {\n    dates.groupBy(date => date.substring(0, 10)).mapValues(_.size)\n  }\n\n  // Fonction pour obtenir les mots les plus frÃ©quents\n  def getMostFrequentWords(reports: List[Report], limit: Int): List[String] = {\n    val allWords = reports.flatMap(_.words.split(\" \"))\n    allWords.groupBy(identity).mapValues(_.size).toList.sortBy(-_._2).take(limit).map(_._1)\n  }\n\n  // Menu pour sÃ©lectionner les statistiques Ã  afficher\n  def printMenu(): Unit = {\n    println(\"==== Menu ====\")\n    println(\"1. Score moyen des citoyens\")\n    println(\"2. Score maximum et minimum des citoyens\")\n    println(\"3. Nombre de citoyens par score\")\n   \n }\n\n   }"}})[0m
[0m[[0m[0mdebug[0m] [0m[0mEvaluating tasks: Compile / collectAnalyses[0m
[0m[[0m[0mdebug[0m] [0m[0mRunning task... Cancel: Signal, check cycles: false, forcegc: true[0m
[0m[[0m[0mdebug[0m] [0m[0manalysis location (/Users/marielynn/Documents/GitHub/data_engineering_project/target/scala-2.12/zinc/inc_compile_2.12.zip,true)[0m
[0m[[0m[32msuccess[0m] [0m[0mTotal time: 1 s, completed 27 mai 2023, 11:16:16[0m
[0m[[0m[0mdebug[0m] [0m[0munmatched Done event for requestId None: None[0m
[0m[[0m[0mdebug[0m] [0m[0m> Exec(shell, None, None)[0m
[0m[[0m[0mdebug[0m] [0m[0mForcing garbage collection...[0m
